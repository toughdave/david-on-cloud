name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  DOCKER_IMAGE_NAME: davidoncloud
  REGISTRY: ghcr.io

jobs:
  # ===== CODE QUALITY CHECKS =====
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm init -y
          npm install --save-dev htmlhint stylelint stylelint-config-standard eslint

      - name: Lint HTML
        run: |
          npx htmlhint "*.html" --config .htmlhintrc || true

      - name: Lint CSS
        run: |
          npx stylelint "css/**/*.css" --config .stylelintrc.json || true

      - name: Lint JavaScript
        run: |
          npx eslint "js/**/*.js" --config .eslintrc.js || true

  # ===== SECURITY SCANNING =====
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # ===== BUILD & TEST =====
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Validate HTML structure
        run: |
          # Check for required meta tags and structure
          grep -q 'charset="UTF-8"' index.html || exit 1
          grep -q 'viewport' index.html || exit 1
          echo "‚úÖ HTML structure validation passed"

      - name: Check JavaScript syntax
        run: |
          node -c js/scripts.js
          node -c js/project-times.js
          echo "‚úÖ JavaScript syntax validation passed"

      - name: Validate CSS
        run: |
          # Basic CSS validation - check for syntax errors
          grep -q "body" css/style.css || exit 1
          echo "‚úÖ CSS validation passed"

      - name: Check for broken links (internal)
        run: |
          # Simple check for common broken link patterns
          ! grep -r "href=\"#broken" . || exit 1
          ! grep -r "src=\"missing" . || exit 1
          echo "‚úÖ Basic link validation passed"

      - name: Build artifact
        run: |
          mkdir -p build
          cp -r . build/
          # Remove development files from build
          rm -rf build/.git
          rm -rf build/.github
          rm -rf build/node_modules
          rm -f build/.gitignore
          echo "‚úÖ Build artifact created"

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: website-build
          path: build/
          retention-days: 30

  # ===== DOCKER BUILD =====
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== DEPLOY TO STAGING =====
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: website-build
          path: staging-deploy/

      - name: Deploy to staging server
        run: |
          echo "üöÄ Deploying to staging environment..."
          echo "üìÅ Files ready for deployment in staging-deploy/"
          # Add your staging deployment commands here
          # Example: rsync, SCP, or cloud provider CLI commands

      - name: Health check
        run: |
          echo "üîç Running health checks..."
          # Add health check commands here
          # Example: curl checks, smoke tests

  # ===== DEPLOY TO PRODUCTION =====
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifact
        uses: actions/download-artifact@v3
        with:
          name: website-build
          path: production-deploy/

      - name: Deploy to production
        run: |
          echo "üöÄ Deploying to production environment..."
          echo "üìÅ Files ready for deployment in production-deploy/"
          # Add your production deployment commands here
          
          # Example deployment strategies:
          # 1. Static hosting (GitHub Pages, Netlify, Vercel)
          # 2. Cloud storage (AWS S3, Azure Blob, GCP Storage)
          # 3. Traditional server (via SSH/SCP)
          # 4. Container deployment (Docker, Kubernetes)

      - name: Update version tracking
        run: |
          echo "üìù Version $(cat VERSION) deployed successfully"
          echo "üïê Deployment time: $(date)"

      - name: Post-deployment health check
        run: |
          echo "üîç Running production health checks..."
          # Add production health checks here
          # Example: 
          # curl -f https://davidoncloud.com || exit 1
          # Check specific endpoints and functionality

      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment completed successfully!"
          echo "üåê Website is live at: https://davidoncloud.com"

  # ===== CLEANUP =====
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    steps:
      - name: Clean up old artifacts
        run: |
          echo "üßπ Cleaning up temporary files and old artifacts..."
          # Cleanup commands can be added here